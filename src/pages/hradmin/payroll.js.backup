import React, { useCallback, useState, useEffect, useMemo, useRef } from "react";
import { Search, Calendar, Check, X, Pencil } from "lucide-react";
import Sidebar from "@/components/Sidebar";
import HradminNavbar from "@/components/HradminNavbar";
import { Badge } from "@/components/ui/badge";
import { useDispatch, useSelector } from "react-redux";
import { fetchEmployees } from "@/redux/slices/employeeSlice";
import withAuth from "@/components/withAuth";
import { toast } from "sonner";
import { getItemFromSessionStorage } from "@/redux/slices/sessionStorageSlice";
import getConfig from "next/config";
import { fetchAllEmployeeAttendanceOneMonth } from "@/redux/slices/attendancesSlice";
import { generatePayroll, getPayroll, sendPayslips, clearPayroll } from "@/redux/slices/payrollSlice";
import { createOrUpdateEmployeeAdvance, fetchCompanyEmployeeAdvances, clearError, clearSuccess } from "@/redux/slices/employeeAdvanceSlice";
import { updateArrearsPaid, updateArrearsDeducted, fetchCompanyArrears } from "@/redux/slices/arrearsSlice";
import { checkPayrollFreezeStatus } from "@/redux/slices/payrollFreezeStatusSlice";
import { createPayrollFreezeStatus } from "@/redux/slices/payrollFreezeStatusSlice";
import { savePayStructureSettings, fetchPayStructureSettings, fetchPayrollSettings } from "@/redux/slices/payrollSettingsSlice";

function PayrollManagement() {
  const selectedCompanyId = sessionStorage.getItem("employeeCompanyId");
  const dispatch = useDispatch();

  const { attendance } = useSelector((state) => state.attendances);
  const { payroll } = useSelector((state) => state.payroll);
  const { 
    loading: advanceLoading, 
    error: advanceError, 
    success: advanceSuccess, 
    message: advanceMessage,
    companyAdvances,
    companyAdvancesLoading,
    companyAdvancesError
  } = useSelector((state) => state.employeeAdvance);
  
  const { 
    loading: arrearsLoading, 
    error: arrearsError, 
    success: arrearsSuccess,
    companyArrears,
    companyArrearsLoading,
    companyArrearsError
  } = useSelector((state) => state.arrears);
  
  const { 
    freezeStatus, 
    checkLoading: freezeStatusLoading, 
    createLoading: freezeCreateLoading, 
    createError: freezeCreateError 
  } = useSelector((state) => state.payrollFreezeStatus);
  const [selectedSection, setSelectedSection] = useState("Salary Statement");
  const [searchQuery, setSearchQuery] = useState("");
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [isCalendarOpen, setIsCalendarOpen] = useState(false);
  const [showCheckboxes, setShowCheckboxes] = useState(false);
  const [selectedEmployees, setSelectedEmployees] = useState([]);
  const [showConfirmationModal, setShowConfirmationModal] = useState(false);
  const [showFreezePayrollModal, setShowFreezePayrollModal] = useState(false);
  const [payslipsSent, setPayslipsSent] = useState(false);
  const [isCalculatePayrollClicked, setIsCalculatePayrollClicked] =
    useState(false);
  const [payrollErrorDetails, setPayrollErrorDetails] = useState(null);
  const [isCalculatingPayroll, setIsCalculatingPayroll] = useState(false);
  const [hasAttemptedCalculate, setHasAttemptedCalculate] = useState(false);
  const [isFetchingView, setIsFetchingView] = useState(false);
  const [dataLastUpdated, setDataLastUpdated] = useState(null);
  const [isApiCallInProgress, setIsApiCallInProgress] = useState(false);
  const [editingArrears, setEditingArrears] = useState({});
  const [arrearsValues, setArrearsValues] = useState([]);
  const [originalArrearsValues, setOriginalArrearsValues] = useState({});
  const [editingArrearsDeducted, setEditingArrearsDeducted] = useState({});
  const [arrearsDeductedValues, setArrearsDeductedValues] = useState({});
  const [originalArrearsDeductedValues, setOriginalArrearsDeductedValues] = useState({});
  const [editingAdvance, setEditingAdvance] = useState({});
  const [advanceValues, setAdvanceValues] = useState({});
  const [originalAdvanceValues, setOriginalAdvanceValues] = useState({});
  const [selectedMonth, setSelectedMonth] = useState(() => {
    const currentDate = new Date();
    const latestAvailableMonth = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth() - 1,
      1
    );
    return latestAvailableMonth.toLocaleString("default", { month: "long" });
  });
  const [selectedYear, setSelectedYear] = useState(() => {
    const currentDate = new Date();
    const latestAvailableMonth = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth() - 1,
      1
    );
    return latestAvailableMonth.getFullYear().toString();
  });
  const [payrollCalculatedForCurrentMonth, setPayrollCalculatedForCurrentMonth] = useState(false);
  
  // Pay Structure Settings modal state
  const [showPayStructureModal, setShowPayStructureModal] = useState(false);
  const [showPayStructureConfirmationModal, setShowPayStructureConfirmationModal] = useState(false);
  const [isEditingPayStructure, setIsEditingPayStructure] = useState(false);
  const [payStructureForm, setPayStructureForm] = useState({
    basicPercentage: "",
    hraPercentage: "",
    employerPfPercentage: "",
    employeePfPercentage: "",
    pfCap: "",
    professionalTaxThreshold: "",
    professionalTaxAmountAboveThreshold: "",
    professionalTaxAmountBelowThreshold: "",
    description: "",
  });
  
  // Ref to track the last API call to prevent duplicates
  const lastApiCallRef = useRef('');

  // Add logging for state changes
  useEffect(() => {
    console.log('📅 selectedMonth changed to:', selectedMonth);
  }, [selectedMonth]);

  useEffect(() => {
    console.log('📅 selectedYear changed to:', selectedYear);
  }, [selectedYear]);

  useEffect(() => {
    console.log('🏢 selectedCompanyId changed to:', selectedCompanyId);
  }, [selectedCompanyId]);

  const { employees, loading, err } = useSelector((state) => state.employees);

  const toggleCalendar = () => setIsCalendarOpen(!isCalendarOpen);
  const { publicRuntimeConfig } = getConfig();

  // Helper function to format time as "X mins back"
  const formatTimeAgo = (date) => {
    const now = new Date();
    const diffInMinutes = Math.floor((now - date) / (1000 * 60));
    
    if (diffInMinutes < 1) return "Just now";
    if (diffInMinutes === 1) return "1 min back";
    if (diffInMinutes < 60) return `${diffInMinutes} mins back`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours === 1) return "1 hour back";
    if (diffInHours < 24) return `${diffInHours} hours back`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays === 1) return "1 day back";
    return `${diffInDays} days back`;
  };



  // Helper functions for arrears editing
  const handleArrearsEdit = (employeeId) => {
    // Only allow editing for current month and when not frozen
    if (!isCurrentMonth() || isPayrollFrozen()) {
      toast.error("Arrears can only be edited for the current month when payroll is active");
      return;
    }
    setEditingArrears(prev => ({ ...prev, [employeeId]: true }));
    // Store original value before editing starts
    const currentValue = arrearsValues[employeeId] !== undefined 
      ? arrearsValues[employeeId] 
      : (getEmployeeArrears(employeeId)?.arrearsPaid || 0);
    setOriginalArrearsValues(prev => ({ ...prev, [employeeId]: currentValue }));
    // Start with empty input field for better user experience
    setArrearsValues(prev => ({ ...prev, [employeeId]: '' }));
  };

  const handleArrearsSave = async (employeeId) => {
    const inputValue = arrearsValues[employeeId];
    
    if (!inputValue || inputValue === '' || inputValue === '-') {
      toast.error("Please enter a valid amount");
      return;
    }
    
    const numericValue = parseFloat(inputValue);
    
    if (isNaN(numericValue) || numericValue <= 0) {
      toast.error("Please enter a valid positive amount");
      return;
    }

    try {
      // Check if user is authenticated
      const token = sessionStorage.getItem("token");
      if (!token) {
        toast.error("Authentication required. Please login again.");
        return;
      }

      // Check if company ID exists
      if (!selectedCompanyId) {
        toast.error("Company ID not found. Please refresh the page.");
        return;
      }

      const monthMap = {
        January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
        July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
      };
      
      const month = monthMap[selectedMonth];
      const year = parseInt(selectedYear);
      
      const payload = {
        employeeId,
        companyId: selectedCompanyId,
        month,
        year,
        arrearsPaid: numericValue,
        arrearsDeducted: getEmployeeArrears(employeeId)?.arrearsDeducted || 0
      };

      const result = await dispatch(updateArrearsPaid(payload)).unwrap();
      
      if (result) {
        setEditingArrears(prev => ({ ...prev, [employeeId]: false }));
        setArrearsValues(prev => ({ ...prev, [employeeId]: numericValue }));
        toast.success(`Arrears paid updated to ₹${numericValue} for employee ${employeeId}`);
        
        // Clear any previous errors
        dispatch(clearError());
        
        // Auto-refresh arrears data to show updated values
        if (selectedCompanyId && selectedMonth && selectedYear) {
          const monthMap = {
            January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
            July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
          };
          const month = monthMap[selectedMonth];
          const year = parseInt(selectedYear);
          dispatch(fetchCompanyArrears({ companyId: selectedCompanyId, month, year }));
        }
      }
    } catch (error) {
      console.error("Failed to update arrears paid:", error);
      const errorMessage = error.message || "Failed to update arrears paid. Please try again.";
      toast.error(errorMessage);
    }
  };

  const handleArrearsCancel = (employeeId) => {
    setEditingArrears(prev => ({ ...prev, [employeeId]: false }));
    // Reset to original value that was stored before editing started
    const originalValue = originalArrearsValues[employeeId] || 0;
    setArrearsValues(prev => ({ ...prev, [employeeId]: originalValue }));
  };

  const handleArrearsChange = (employeeId, value) => {
    // Keep the raw input value to allow for partial typing (like "-" or "123.")
    setArrearsValues(prev => ({ ...prev, [employeeId]: value }));
  };

  // Helper functions for arrears deducted editing
  const handleArrearsDeductedEdit = (employeeId) => {
    // Only allow editing for current month and when not frozen
    if (!isCurrentMonth() || isPayrollFrozen()) {
      toast.error("Arrears deducted can only be edited for the current month when payroll is active");
      return;
    }
    setEditingArrearsDeducted(prev => ({ ...prev, [employeeId]: true }));
    // Store original value before editing starts
    const currentValue = arrearsDeductedValues[employeeId] !== undefined 
      ? arrearsDeductedValues[employeeId] 
      : (getEmployeeArrears(employeeId)?.arrearsDeducted || 0);
    setOriginalArrearsDeductedValues(prev => ({ ...prev, [employeeId]: currentValue }));
    // Start with empty input field for better user experience
    setArrearsDeductedValues(prev => ({ ...prev, [employeeId]: '' }));
  };

  const handleArrearsDeductedSave = async (employeeId) => {
    const inputValue = arrearsDeductedValues[employeeId];
    
    if (!inputValue || inputValue === '' || inputValue === '-') {
      toast.error("Please enter a valid amount");
      return;
    }
    
    const numericValue = parseFloat(inputValue);
    
    if (isNaN(numericValue) || numericValue <= 0) {
      toast.error("Please enter a valid positive amount");
      return;
    }

    try {
      // Check if user is authenticated
      const token = sessionStorage.getItem("token");
      if (!token) {
        toast.error("Authentication required. Please login again.");
        return;
      }

      // Check if company ID exists
      if (!selectedCompanyId) {
        toast.error("Company ID not found. Please refresh the page.");
        return;
      }

      const monthMap = {
        January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
        July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
      };
      
      const month = monthMap[selectedMonth];
      const year = parseInt(selectedYear);
      
      const payload = {
        employeeId,
        companyId: selectedCompanyId,
        month,
        year,
        arrearsDeducted: numericValue,
        arrearsPaid: getEmployeeArrears(employeeId)?.arrearsPaid || 0
      };

      const result = await dispatch(updateArrearsDeducted(payload)).unwrap();
      
      if (result) {
        setEditingArrearsDeducted(prev => ({ ...prev, [employeeId]: false }));
        setArrearsDeductedValues(prev => ({ ...prev, [employeeId]: numericValue }));
        toast.success(`Arrears deducted updated to ₹${numericValue} for employee ${employeeId}`);
        
        // Clear any previous errors
        dispatch(clearError());
        
        // Auto-refresh arrears data to show updated values
        if (selectedCompanyId && selectedMonth && selectedYear) {
          const monthMap = {
            January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
            July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
          };
          const month = monthMap[selectedMonth];
          const year = parseInt(selectedYear);
          dispatch(fetchCompanyArrears({ companyId: selectedCompanyId, month, year }));
        }
      }
    } catch (error) {
      console.error("Failed to update arrears deducted:", error);
      const errorMessage = error.message || "Failed to update arrears deducted. Please try again.";
      toast.error(errorMessage);
    }
  };

  const handleArrearsDeductedCancel = (employeeId) => {
    setEditingArrearsDeducted(prev => ({ ...prev, [employeeId]: false }));
    // Reset to original value that was stored before editing started
    const originalValue = originalArrearsDeductedValues[employeeId] || 0;
    setArrearsDeductedValues(prev => ({ ...prev, [employeeId]: originalValue }));
  };

  const handleArrearsDeductedChange = (employeeId, value) => {
    // Keep the raw input value to allow for partial typing (like "-" or "123.")
    setArrearsDeductedValues(prev => ({ ...prev, [employeeId]: value }));
  };

  // Helper functions for advance editing (positive values only)
  const handleAdvanceEdit = (employeeId, field) => {
    // Only allow editing for current month and when not frozen
    if (!isCurrentMonth() || isPayrollFrozen()) {
      toast.error("Advance fields can only be edited for the current month when payroll is active");
      return;
    }
    const key = `${employeeId}_${field}`;
    setEditingAdvance(prev => ({ ...prev, [key]: true }));
    // Store original value before editing starts
    const advanceData = companyAdvances?.find(advance => advance.employeeId === employeeId);
    const currentValue = field === 'thisMonth' 
      ? advanceData?.thisMonthAdvance || 0
      : advanceData?.deductedThisMonth || 0;
    setOriginalAdvanceValues(prev => ({ ...prev, [key]: currentValue }));
    // Start with empty input field for better user experience
    setAdvanceValues(prev => ({ ...prev, [key]: '' }));
  };

  const handleAdvanceSave = async (employeeId, field) => {
    const key = `${employeeId}_${field}`;
    const inputValue = advanceValues[key];
    
    // Check if amount is entered
    if (!inputValue || inputValue === '' || parseFloat(inputValue) === 0) {
      toast.error("No amount entered. Please enter an amount to save.");
      return;
    }
    
    // Convert string input to positive number for saving
    const numericValue = Math.max(0, parseFloat(inputValue) || 0);
    
    // Get current month and year for API call
    const monthMap = {
      January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
      July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
    };
    
    const month = monthMap[selectedMonth];
    const year = parseInt(selectedYear);
    
    try {
      // Call API to update employee advance
      // Get existing advance data for this employee to preserve other fields
      const existingAdvanceData = companyAdvances?.find(
        (advance) => advance.employeeId === employeeId
      );
      
      const payload = {
        companyId: selectedCompanyId,
        employeeId,
        month,
        year,
        // Preserve existing values and update only the field being edited
        oldAdvance: existingAdvanceData?.oldAdvance || 0,
        thisMonthAdvance: field === 'thisMonth' ? numericValue : (existingAdvanceData?.thisMonthAdvance || 0),
        deductedThisMonth: field === 'deduct' ? numericValue : (existingAdvanceData?.deductedThisMonth || 0)
      };
      
      await dispatch(createOrUpdateEmployeeAdvance(payload)).unwrap();
      
      // Update local state only after successful API call
      setAdvanceValues(prev => ({ ...prev, [key]: numericValue }));
      setEditingAdvance(prev => ({ ...prev, [key]: false }));
      
      // Fetch fresh company advances data after successful update
      fetchCompanyAdvances();
      
    } catch (error) {
      console.error("Failed to update employee advance:", error);
      // Don't update local state if API fails
    }
  };

  const handleAdvanceCancel = (employeeId, field) => {
    const key = `${employeeId}_${field}`;
    setEditingAdvance(prev => ({ ...prev, [key]: false }));
    // Reset to original value that was stored before editing started
    const originalValue = originalAdvanceValues[key] || 0;
    setAdvanceValues(prev => ({ ...prev, [key]: originalValue }));
  };

  const handleAdvanceChange = (employeeId, field, value) => {
    const key = `${employeeId}_${field}`;
    // Only allow positive numbers - prevent negative input
    if (value.startsWith('-')) return; // Block negative input
    setAdvanceValues(prev => ({ ...prev, [key]: value }));
  };

  // Handle arrears API responses
  useEffect(() => {
    if (arrearsError) {
      toast.error(arrearsError);
    }
  }, [arrearsError]);

  // Handle company arrears API responses
  useEffect(() => {
    if (companyArrearsError) {
      toast.error(companyArrearsError);
    }
  }, [companyArrearsError]);



  // Clear arrears errors when component unmounts
  useEffect(() => {
    return () => {
      dispatch(clearError());
    };
  }, [dispatch]);





  // Fetch company arrears when Arrears tab is selected
  useEffect(() => {
    if (selectedSection === "Arrears" && selectedCompanyId && selectedMonth && selectedYear) {
      const monthMap = {
        January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
        July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
      };
      
      const month = monthMap[selectedMonth];
      const year = parseInt(selectedYear);
      
      dispatch(fetchCompanyArrears({ companyId: selectedCompanyId, month, year }));
    }
  }, [selectedSection, selectedCompanyId, selectedMonth, selectedYear, dispatch]);

  // Helper function to get arrears data for a specific employee
  const getEmployeeArrears = (employeeId) => {
    return companyArrears.find(arrears => arrears.employeeId === employeeId);
  };

  // Check if selected month is the latest available month (current month - 1)
  const isLatestAvailableMonth = () => {
    const currentDate = new Date();
    const latestAvailableMonth = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth() - 1,
      1
    );
    const latestMonth = latestAvailableMonth.toLocaleString("default", {
      month: "long",
    });
    const latestYear = latestAvailableMonth.getFullYear().toString();
    return selectedMonth === latestMonth && selectedYear === latestYear;
  };

  // Check if selected month is the current month for payroll editing (current month - 1)
  const isCurrentMonth = () => {
    const currentDate = new Date();
    const payrollCurrentMonth = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth() - 1,
      1
    );
    const payrollMonth = payrollCurrentMonth.toLocaleString("default", { month: "long" });
    const payrollYear = payrollCurrentMonth.getFullYear().toString();
    return selectedMonth === payrollMonth && selectedYear === payrollYear;
  };

  // Check if payroll is currently frozen based on freeze status API
  const isPayrollFrozen = () => {
    console.log('🔒 isPayrollFrozen() called with state:', {
      freezeStatus,
      freezeStatusLoading,
      freezeStatusType: typeof freezeStatus,
      freezeStatusValue: freezeStatus
    });
    
    // Use the API response directly - true means frozen, false means active
    if (freezeStatusLoading) {
      console.log('🔒 Freeze status is still loading, assuming not frozen for now');
      return false;
    }
    
    if (freezeStatus !== undefined && freezeStatus !== null) {
      console.log('🔒 Using freeze status from API:', freezeStatus);
      
      // Handle different possible API response formats
      let frozen = false;
      if (typeof freezeStatus === 'boolean') {
        // Direct boolean response: true/false
        frozen = freezeStatus === true;
      } else if (typeof freezeStatus === 'object' && freezeStatus !== null) {
        // Object response: { "isFrozen": true } or similar
        frozen = freezeStatus.isFrozen === true || freezeStatus.frozen === true || freezeStatus.status === true;
      } else if (typeof freezeStatus === 'string') {
        // String response: "true"/"false"
        frozen = freezeStatus.toLowerCase() === 'true';
      } else if (typeof freezeStatus === 'number') {
        // Number response: 1/0
        frozen = freezeStatus === 1;
      }
      
      console.log('🔒 Payroll frozen status (parsed):', frozen);
      return frozen;
    }
    
    // Fallback: if API is not working, assume payroll is not frozen
    console.log('🔒 Payroll freeze status API not available, using fallback (not frozen)');
    return false;
  };



  const handleMonthSelection = (month, year) => {
    // Convert short month name to full month name
    const monthMap = {
      Jan: "January",
      Feb: "February",
      Mar: "March",
      Apr: "April",
      May: "May",
      Jun: "June",
      Jul: "July",
      Aug: "August",
      Sep: "September",
      Oct: "October",
      Nov: "November",
      Dec: "December",
    };

    const fullMonthName = monthMap[month] || month;
    
    setSelectedMonth(fullMonthName);
    setSelectedYear(year);
    setIsCalendarOpen(false);
    

    
    // Reset state when month changes
    setIsCalculatePayrollClicked(false);
    setPayrollCalculatedForCurrentMonth(false);
    setHasAttemptedCalculate(false);
    setShowCheckboxes(false);
    setSelectedEmployees([]);
    setPayrollErrorDetails(null);
    setDataLastUpdated(null);
    setPayslipsSent(false); // Reset payslips sent status for new month
    setEditingArrears({});
    setArrearsValues({});
    setOriginalArrearsValues({});
    setEditingArrearsDeducted({});
    setArrearsDeductedValues({});
    setOriginalArrearsDeductedValues({});
    setEditingAdvance({});
    setAdvanceValues({});
    setOriginalAdvanceValues({});
  };

  // Single useEffect to handle payroll API calls on mount and month/year changes
  useEffect(() => {
    if (selectedCompanyId && selectedMonth && selectedYear && !isApiCallInProgress) {
      const monthMap = {
        January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
        July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
      };
      
      const params = {
        companyId: selectedCompanyId,
        year: parseInt(selectedYear),
        month: monthMap[selectedMonth],
      };
      
      // Create a unique key for this API call
      const apiCallKey = `${selectedCompanyId}_${selectedMonth}_${selectedYear}`;
      
      // Prevent duplicate API calls for the same month/year
      if (lastApiCallRef.current === apiCallKey) {
        console.log('🔄 API already called for this month/year, skipping:', apiCallKey);
        return;
      }
      
      console.log('🚀 Calling payroll API with params:', params);
      
      // Set flag to prevent multiple calls
      setIsApiCallInProgress(true);
      setIsFetchingView(true);
      setPayrollErrorDetails(null);
      
      // Update the ref to track this API call
      lastApiCallRef.current = apiCallKey;
      
      dispatch(getPayroll(params))
        .unwrap()
        .then((result) => {
          console.log('✅ Payroll API call successful:', result);
          setPayrollErrorDetails(null);
          
          if (result && Array.isArray(result) && result.length > 0) {
            setIsCalculatePayrollClicked(true);
            setDataLastUpdated(new Date());
            setPayrollCalculatedForCurrentMonth(true);
          } else {
            setIsCalculatePayrollClicked(false);
            setPayrollCalculatedForCurrentMonth(false);
            setDataLastUpdated(null);
          }
        })
        .catch((error) => {
          console.log('❌ Payroll API call failed:', error);
          setPayrollErrorDetails(error);
          setIsCalculatePayrollClicked(false);
          setPayrollCalculatedForCurrentMonth(false);
        })
        .finally(() => {
          setIsFetchingView(false);
          setIsApiCallInProgress(false);
        });
    }
  }, [selectedCompanyId, selectedMonth, selectedYear, dispatch]);

  // Cleanup function to reset the API call ref when month/year changes
  useEffect(() => {
    // Reset the ref when month/year changes to allow new API calls
    lastApiCallRef.current = '';
  }, [selectedMonth, selectedYear]);

  // Handle freeze status API errors and logging
  useEffect(() => {
    if (freezeStatusLoading === false) {
      if (freezeStatus) {
        console.log('🔒 Payroll freeze status loaded:', freezeStatus);
      } else {
        console.log('🔒 Payroll freeze status check completed, no data');
      }
    }
  }, [freezeStatusLoading, freezeStatus]);

  // Handle freeze creation errors
  useEffect(() => {
    if (freezeCreateError) {
      toast.error(freezeCreateError.message || "Failed to freeze payroll");
    }
  }, [freezeCreateError]);

  // Initialize arrears values when payroll data is loaded
  useEffect(() => {
    if (payroll && Array.isArray(payroll) && payroll.length > 0) {
      const initialArrearsValues = {};
      const initialArrearsDeductedValues = {};
      payroll.forEach(item => {
        initialArrearsValues[item.employeeId] = item.arrearsPaid;
        initialArrearsDeductedValues[item.employeeId] = item.arrearsDeducted;
      });
      setArrearsValues(initialArrearsValues);
      setArrearsDeductedValues(initialArrearsDeductedValues);
      // Also set original values for cancel functionality
      setOriginalArrearsValues(initialArrearsValues);
      setOriginalArrearsDeductedValues(initialArrearsDeductedValues);
      
      // If we have payroll data, ensure the calculation state is set
      if (!isCalculatePayrollClicked) {
        setIsCalculatePayrollClicked(true);
        setDataLastUpdated(new Date());
      }
    }
  }, [payroll, isCalculatePayrollClicked]);

  // Initialize advance values when employees data is loaded
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const initialAdvanceValues = {};
      employees.forEach(employee => {
        // Find corresponding advance data for this employee
        const advanceData = companyAdvances?.find(
          (advance) => advance.employeeId === employee.employeeId
        );
        
        initialAdvanceValues[`${employee.employeeId}_thisMonth`] = advanceData?.thisMonthAdvance ?? employee.thisMonthAdvance ?? 0;
        initialAdvanceValues[`${employee.employeeId}_deduct`] = advanceData?.deductedThisMonth ?? employee.deductInThisMonth ?? 0;
      });
      setAdvanceValues(initialAdvanceValues);
      // Also set original values for cancel functionality
      setOriginalAdvanceValues(initialAdvanceValues);
    }
  }, [employees, companyAdvances]);

  // Handle employee advance error messages
  useEffect(() => {
    if (advanceError) {
      toast.error(advanceError);
      dispatch(clearError());
    }
  }, [advanceError, dispatch]);

  // Function to fetch company employee advances
  const fetchCompanyAdvances = useCallback(() => {
    const monthMap = {
      January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
      July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
    };
    
    const month = monthMap[selectedMonth];
    const year = parseInt(selectedYear);
    
    dispatch(fetchCompanyEmployeeAdvances({
      companyId: selectedCompanyId,
      month,
      year
    }));
  }, [dispatch, selectedCompanyId, selectedMonth, selectedYear]);

  // Fetch company advances when Advance tab is selected
  useEffect(() => {
    if (selectedSection === "Advance") {
      fetchCompanyAdvances();
    }
  }, [selectedSection, fetchCompanyAdvances]);

  // Fetch company advances when month/year changes (if Advance tab is active)
  useEffect(() => {
    if (selectedSection === "Advance") {
      fetchCompanyAdvances();
    }
  }, [selectedMonth, selectedYear, selectedSection, fetchCompanyAdvances]);

  console.log(payroll);

  const renderPayrollTable = () => (
    <div className="bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200">
      <div className="max-h-[calc(100vh-280px)] overflow-auto">
        <table className="w-full border-collapse">
          <thead className="sticky top-0">
            <tr className="bg-gradient-to-r from-blue-50 to-indigo-50">
              {showCheckboxes && (
                <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-gray-100">
                  <input
                    type="checkbox"
                    checked={selectedEmployees.length === (payroll && Array.isArray(payroll) ? payroll.length : 0)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setSelectedEmployees(
                          payroll && Array.isArray(payroll) ? payroll.map((item) => item.employeeId) : []
                        );
                      } else {
                        setSelectedEmployees([]);
                      }
                    }}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                </th>
              )}
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                EMPLOYEE <br /> ID
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                NAME
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                MONTHLY <br /> CTC
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                PAID DAYS
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                THIS MONTH <br /> SALARY
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                BASIC
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                HRA
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                OTHER <br /> ALLOWANCES
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                Fuel <br /> REIMB.
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                Phone <br /> REIMB.
              </th>

              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-red-100">
                EMPLOYEE <br /> PF
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-red-100">
                EMPLOYER <br /> PF
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-red-100">
                DEDUCTIONS
              </th>
              <th className="py-3 px-1 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                NET PAY
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {payroll && Array.isArray(payroll) && payroll.length > 0 ? (
              payroll
                .filter((payrollItem) => {
                  if (!searchQuery) return true;
                  // Find the employee name for this payroll item
                  const employee = employees.find(emp => emp.employeeId === payrollItem.employeeId);
                  return (
                    employee?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                    payrollItem.employeeId.toLowerCase().includes(searchQuery.toLowerCase())
                  );
                })
                .map((payrollItem, index) => {
                  // Find corresponding employee data for this payroll item
                  const employee = employees.find(emp => emp.employeeId === payrollItem.employeeId);

                  return (
                    <tr key={index} className="hover:bg-blue-50 transition-colors duration-150">
                      {showCheckboxes && (
                        <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50">
                          <input
                            type="checkbox"
                            checked={selectedEmployees.includes(
                              payrollItem.employeeId
                            )}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setSelectedEmployees([
                                  ...selectedEmployees,
                                  payrollItem.employeeId,
                                ]);
                              } else {
                                setSelectedEmployees(
                                  selectedEmployees.filter(
                                    (id) => id !== payrollItem.employeeId
                                  )
                                );
                              }
                            }}
                            className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                          />
                        </td>
                      )}
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50 font-medium">
                        {payrollItem.employeeId}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50 font-medium">
                        {employee?.name || 'N/A'}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50">
                        ₹{payrollItem.monthlyCTC || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50">
                        {payrollItem.paidDays || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50">
                        ₹{payrollItem.thisMonthSalary || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50">
                        ₹{payrollItem.basicThisMonth || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50">
                        ₹{payrollItem.hraThisMonth || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50">
                        ₹{payrollItem.otherAllowancesThisMonth || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50">
                        ₹{payrollItem.fuelReimbursementThisMonth || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50">
                        ₹{payrollItem.phoneReimbursementThisMonth || 0}
                      </td>
                      
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-red-50">
                        ₹{payrollItem.employeePFThisMonth || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-red-50">
                        ₹{payrollItem.employerPFThisMonth || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-red-50">
                        ₹{payrollItem.otherDeductions || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-red-50">
                        ₹{payrollItem.netPay || 0}
                      </td>
                    </tr>
                  );
                })
            ) : (
              <tr>
                <td colSpan={showCheckboxes ? 15 : 14} className="py-12 text-center">
                  {isFetchingView ? (
                    <div className="flex items-center justify-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mr-3"></div>
                      <span className="text-gray-600 font-medium">Loading payroll data...</span>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center">
                      <div className="text-gray-300 mb-4">
                        <svg className="h-20 w-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                        </svg>
                      </div>
                      <p className="text-gray-500 text-xl font-semibold mb-2">No employee found</p>
                      <p className="text-gray-400 text-sm">No payroll data available for the selected period</p>
                    </div>
                  )}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );

  const renderDeductionsTable = () => (
    <div className="bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200">
      <div className="max-h-[calc(100vh-280px)] overflow-auto">
        <table className="w-full border-collapse">
          <thead className="sticky top-0">
            <tr className="bg-gradient-to-r from-red-50 to-pink-50">
              {showCheckboxes && (
                <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-gray-100">
                  <input
                    type="checkbox"
                    checked={selectedEmployees.length === (payroll && Array.isArray(payroll) ? payroll.length : 0)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setSelectedEmployees(
                          payroll && Array.isArray(payroll) ? payroll.map((item) => item.employeeId) : []
                        );
                      } else {
                        setSelectedEmployees([]);
                      }
                    }}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                </th>
              )}
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Employee ID
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Name
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Department
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-red-100">
                Employee PF
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-red-100">
                Employer PF
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-red-100">
                Professional Tax
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-red-100">
                Advance Adjusted
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Net Deductions
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {payroll && Array.isArray(payroll) && payroll.length > 0 ? (
              payroll
                .filter((payrollItem) => {
                  if (!searchQuery) return true;
                  // Find the employee name for this payroll item
                  const employee = employees.find(emp => emp.employeeId === payrollItem.employeeId);
                  return (
                    employee?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                    payrollItem.employeeId.toLowerCase().includes(searchQuery.toLowerCase())
                  );
                })
                .map((payrollItem, index) => {
                  // Find corresponding employee data for this payroll item
                  const employee = employees.find(emp => emp.employeeId === payrollItem.employeeId);

                  return (
                    <tr key={index} className="hover:bg-red-50 transition-colors duration-150">
                      {showCheckboxes && (
                        <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50">
                          <input
                            type="checkbox"
                            checked={selectedEmployees.includes(
                              payrollItem.employeeId
                            )}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setSelectedEmployees([
                                  ...selectedEmployees,
                                  payrollItem.employeeId,
                                ]);
                              } else {
                                setSelectedEmployees(
                                  selectedEmployees.filter(
                                    (id) => id !== payrollItem.employeeId
                                  )
                                );
                              }
                            }}
                            className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                          />
                        </td>
                      )}
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50 font-medium">
                        {payrollItem.employeeId}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50 font-medium">
                        {employee?.name || 'N/A'}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50">
                        {employee?.departmentName || 'N/A'}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-red-50">
                        ₹{payrollItem.employeePFThisMonth || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-red-50">
                        ₹{payrollItem.employerPFThisMonth || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-red-50">
                        ₹{payrollItem.professionalTax || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-red-50">
                        ₹{payrollItem.advanceAdjusted || 0}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-blue-50 font-semibold">
                        ₹{(
                          (payrollItem.employeePFThisMonth || 0) +
                          (payrollItem.employerPFThisMonth || 0) +
                          (payrollItem.professionalTax || 0)
                        )}
                      </td>
                    </tr>
                  );
                })
            ) : (
              <tr>
                <td colSpan={showCheckboxes ? 10 : 9} className="py-12 text-center">
                  <div className="flex flex-col items-center justify-center">
                    <div className="text-gray-300 mb-4">
                      <svg className="h-20 w-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                    </div>
                    <p className="text-gray-500 text-xl font-semibold mb-2">No employee found</p>
                    <p className="text-gray-400 text-sm">No payroll data available for the selected period</p>
                  </div>
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );

  const renderAdvanceTable = () => (
    <div className="bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200">
      {companyAdvancesLoading && (
        <div className="flex items-center justify-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <span className="ml-3 text-gray-600">Loading advance data...</span>
        </div>
      )}
      {companyAdvancesError && (
        <div className="p-4 text-center text-red-600">
          Error loading advance data: {companyAdvancesError}
        </div>
      )}
            {!companyAdvancesLoading && !companyAdvancesError && (
        <div className="max-h-[calc(100vh-280px)] overflow-auto">

          <table className="w-full border-collapse">
          <thead className="sticky top-0">
            <tr className="bg-gradient-to-r from-yellow-50 to-orange-50">
              {showCheckboxes && (
                <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-gray-100">
                  <input
                    type="checkbox"
                    checked={selectedEmployees.length === (payroll && Array.isArray(payroll) ? payroll.length : 0)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setSelectedEmployees(
                          payroll && Array.isArray(payroll) ? payroll.map((item) => item.employeeId) : []
                        );
                      } else {
                        setSelectedEmployees([]);
                      }
                    }}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                </th>
              )}
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Employee ID
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Name
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Department
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                Old Advance
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-yellow-100">
                This Month Advance
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-yellow-100">
                Deduct in This Month
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                Balance for Next Month
              </th>
            </tr>
          </thead>
                    <tbody className="divide-y divide-gray-200">
            {payroll && Array.isArray(payroll) && payroll.length > 0 ? (
              payroll
                .filter((payrollItem) => {
                  if (!searchQuery) return true;
                  // Find the employee name for this payroll item
                  const employee = employees.find(emp => emp.employeeId === payrollItem.employeeId);
                  return (
                    employee?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                    payrollItem.employeeId.toLowerCase().includes(searchQuery.toLowerCase())
                  );
                })
                .map((payrollItem, index) => {
                  // Find corresponding employee data for this payroll item
                  const employee = employees.find(emp => emp.employeeId === payrollItem.employeeId);
                  // Find corresponding advance data for this employee
                  const advanceData = companyAdvances?.find(
                    (advance) => advance.employeeId === payrollItem.employeeId
                  );
                  
                  return (
                    <tr key={index} className="hover:bg-yellow-50 transition-colors duration-150">
                    {showCheckboxes && (
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50">
                        <input
                          type="checkbox"
                          checked={selectedEmployees.includes(
                            payrollItem.employeeId
                          )}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedEmployees([
                                ...selectedEmployees,
                                payrollItem.employeeId,
                              ]);
                            } else {
                              setSelectedEmployees(
                                selectedEmployees.filter(
                                  (id) => id !== payrollItem.employeeId
                                )
                              );
                            }
                          }}
                          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        />
                      </td>
                    )}
                    <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50 font-medium">
                      {payrollItem.employeeId}
                    </td>
                    <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50 font-medium">
                      {employee?.name || 'N/A'}
                    </td>
                    <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50">
                      {employee?.departmentName || 'N/A'}
                    </td>
                    <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50">
                      ₹{advanceData?.oldAdvance || employee?.oldAdvance || 0}
                    </td>
                    <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-yellow-50">
                      {editingAdvance[`${payrollItem.employeeId}_thisMonth`] ? (
                        <div className="flex items-center gap-1">
                          <input
                            type="number"
                            value={advanceValues[`${payrollItem.employeeId}_thisMonth`] ?? ''}
                            onChange={(e) => handleAdvanceChange(payrollItem.employeeId, 'thisMonth', e.target.value)}
                            className="w-32 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            min="0"
                            step="0.01"
                            placeholder="Enter amount"
                            autoFocus
                          />
                          <button
                            onClick={() => handleAdvanceSave(payrollItem.employeeId, 'thisMonth')}
                            disabled={advanceLoading}
                            className="text-green-600 hover:text-green-800 p-1 hover:bg-green-50 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            title="Save"
                          >
                            {advanceLoading ? (
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-green-600"></div>
                            ) : (
                              <Check className="h-4 w-4" />
                            )}
                          </button>
                          <button
                            onClick={() => handleAdvanceCancel(payrollItem.employeeId, 'thisMonth')}
                            className="text-red-600 hover:text-red-800 p-1 hover:bg-red-50 rounded transition-colors"
                            title="Cancel"
                          >
                            <X className="h-4 w-4" />
                          </button>
                        </div>
                      ) : (
                        <div className="flex items-center justify-between group">
                          <span>
                            ₹{advanceValues[`${payrollItem.employeeId}_thisMonth`] !== undefined 
                              ? (typeof advanceValues[`${payrollItem.employeeId}_thisMonth`] === 'number' 
                                  ? advanceValues[`${payrollItem.employeeId}_thisMonth`] 
                                  : parseFloat(advanceValues[`${payrollItem.employeeId}_thisMonth`]) || 0)
                              : (advanceData?.thisMonthAdvance || employee?.thisMonthAdvance || 0)}
                          </span>
                          {isCurrentMonth() && !isPayrollFrozen() && (
                            <button
                              onClick={() => handleAdvanceEdit(payrollItem.employeeId, 'thisMonth')}
                              className="opacity-0 group-hover:opacity-100 text-blue-600 hover:text-blue-800 p-1 hover:bg-blue-50 rounded transition-all"
                              title="Edit This Month Advance"
                            >
                              <Pencil className="h-4 w-4" />
                            </button>
                          )}
                        </div>
                      )}
                    </td>
                    <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-yellow-50">
                      {editingAdvance[`${payrollItem.employeeId}_deduct`] ? (
                        <div className="flex items-center gap-1">
                          <input
                            type="number"
                            value={advanceValues[`${payrollItem.employeeId}_deduct`] ?? ''}
                            onChange={(e) => handleAdvanceChange(payrollItem.employeeId, 'deduct', e.target.value)}
                            className="w-32 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            min="0"
                            step="0.01"
                            placeholder="Enter amount"
                            autoFocus
                          />
                        <button
                          onClick={() => handleAdvanceSave(payrollItem.employeeId, 'deduct')}
                          disabled={advanceLoading}
                          className="text-green-600 hover:text-green-800 p-1 hover:bg-green-50 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                          title="Save"
                        >
                          {advanceLoading ? (
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-green-600"></div>
                          ) : (
                            <Check className="h-4 w-4" />
                          )}
                        </button>
                        <button
                          onClick={() => handleAdvanceCancel(payrollItem.employeeId, 'deduct')}
                          className="text-red-600 hover:text-red-800 p-1 hover:bg-red-50 rounded transition-colors"
                          title="Cancel"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    ) : (
                      <div className="flex items-center justify-between group">
                        <span>
                          ₹{advanceValues[`${payrollItem.employeeId}_deduct`] !== undefined 
                            ? (typeof advanceValues[`${payrollItem.employeeId}_deduct`] === 'number' 
                                ? advanceValues[`${payrollItem.employeeId}_deduct`] 
                                : parseFloat(advanceValues[`${payrollItem.employeeId}_deduct`]) || 0)
                              : (advanceData?.deductedThisMonth || employee?.deductInThisMonth || 0)}
                        </span>
                        {isCurrentMonth() && !isPayrollFrozen() && (
                          <button
                            onClick={() => handleAdvanceEdit(payrollItem.employeeId, 'deduct')}
                            className="opacity-0 group-hover:opacity-100 text-blue-600 hover:text-blue-800 p-1 hover:bg-blue-50 rounded transition-all"
                            title="Edit Deduct This Month"
                          >
                            <Pencil className="h-4 w-4" />
                          </button>
                        )}
                      </div>
                    )}
                  </td>
                  <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50 font-semibold">
                    <span className={advanceData?.balanceForNextMonth < 0 ? 'text-red-600' : ''}>
                      ₹{advanceData?.balanceForNextMonth || employee?.balanceForNextMonth || 0}
                    </span>
                  </td>
                </tr>
                  );
                })
            ) : (
              <tr>
                <td colSpan={showCheckboxes ? 9 : 8} className="py-12 text-center">
                  <div className="flex flex-col items-center justify-center">
                    <div className="text-gray-300 mb-4">
                      <svg className="h-20 w-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                    </div>
                    <p className="text-gray-500 text-xl font-semibold mb-2">No employee found</p>
                    <p className="text-gray-400 text-sm">No payroll data available for the selected period</p>
                  </div>
                </td>
              </tr>
            )}
          </tbody>
          </table>
                </div>
      )}
    </div>
  );

  const renderArrearsTable = () => (
    <div className="bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200">
      {/* Loading indicator */}
      {companyArrearsLoading && (
        <div className="p-4 text-center">
          <div className="inline-flex items-center gap-2">
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
            <span className="text-sm text-gray-600">Loading arrears data...</span>
          </div>
        </div>
      )}
      
      <div className="max-h-[calc(100vh-280px)] overflow-auto">
        <table className="w-full border-collapse">
          <thead className="sticky top-0">
            <tr className="bg-gradient-to-r from-blue-50 to-indigo-50">
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Employee ID
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Name
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-blue-100">
                Department
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-green-100">
                Arrears Paid
              </th>
              <th className="py-3 px-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider whitespace-nowrap border border-gray-300 bg-red-100">
                Arrears Deducted
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {payroll && Array.isArray(payroll) && payroll.length > 0 ? (
              payroll
                .filter((payrollItem) => {
                  if (!searchQuery) return true;
                  // Find the employee name for this payroll item
                  const employee = employees.find(emp => emp.employeeId === payrollItem.employeeId);
                  return (
                    employee?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                    payrollItem.employeeId.toLowerCase().includes(searchQuery.toLowerCase())
                  );
                })
                .map((payrollItem, index) => {
                  // Find corresponding employee data for this payroll item
                  const employee = employees.find(emp => emp.employeeId === payrollItem.employeeId);

                  console.log(arrearsValues)

                  return (
                    <tr key={index} className="hover:bg-blue-50 transition-colors duration-150">
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50 font-medium">
                        {payrollItem.employeeId}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50 font-medium">
                        {employee?.name || 'N/A'}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-gray-50">
                        {employee?.departmentName || 'N/A'}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-green-50">
                        {editingArrears[payrollItem.employeeId] ? (
                          <div className="flex items-center gap-1">
                            <input
                              type="number"
                              value={arrearsValues[payrollItem.employeeId] || ''}
                              onChange={(e) => handleArrearsChange(payrollItem.employeeId, e.target.value)}
                              className="w-32 px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                              placeholder="Enter amount"
                              min="0"
                              step="0.01"
                            />
                            <button
                              onClick={() => handleArrearsSave(payrollItem.employeeId)}
                              disabled={arrearsLoading}
                              className="p-1 text-green-600 hover:text-green-800 disabled:opacity-50 disabled:cursor-not-allowed"
                              title="Save"
                            >
                              {arrearsLoading ? (
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-green-600"></div>
                              ) : (
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                </svg>
                              )}
                            </button>
                            <button
                              onClick={() => handleArrearsCancel(payrollItem.employeeId)}
                              className="p-1 text-red-600 hover:text-red-800"
                              title="Cancel"
                            >
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                              </svg>
                            </button>
                          </div>
                        ) : (
                          <div className="flex items-center justify-between group">
                            <span>₹{arrearsValues[payrollItem.employeeId] !== undefined 
                              ? arrearsValues[payrollItem.employeeId]
                              : (getEmployeeArrears(payrollItem.employeeId)?.arrearsPaid || 0)}</span>
                            {isCurrentMonth() && !isPayrollFrozen() && (
                              <button
                                onClick={() => handleArrearsEdit(payrollItem.employeeId)}
                                className="opacity-0 group-hover:opacity-100 text-blue-600 hover:text-blue-800 p-1 hover:bg-blue-50 rounded transition-all"
                                title="Edit arrears paid"
                              >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                </svg>
                              </button>
                            )}
                          </div>
                        )}
                      </td>
                      <td className="py-2 px-3 text-xs text-gray-600 border border-gray-300 bg-red-50">
                        {editingArrearsDeducted[payrollItem.employeeId] ? (
                          <div className="flex items-center gap-1">
                            <input
                              type="number"
                              value={arrearsDeductedValues[payrollItem.employeeId] || ''}
                              onChange={(e) => handleArrearsDeductedChange(payrollItem.employeeId, e.target.value)}
                              className="w-32 px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-blue-500"
                              placeholder="Enter amount"
                              min="0"
                              step="0.01"
                            />
                            <button
                              onClick={() => handleArrearsDeductedSave(payrollItem.employeeId)}
                              disabled={arrearsLoading}
                              className="p-1 text-green-600 hover:text-green-800 disabled:opacity-50 disabled:cursor-not-allowed"
                              title="Save"
                            >
                              {arrearsLoading ? (
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-green-600"></div>
                              ) : (
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                </svg>
                              )}
                            </button>
                            <button
                              onClick={() => handleArrearsDeductedCancel(payrollItem.employeeId)}
                              className="text-red-600 hover:text-red-800 p-1"
                              title="Cancel"
                            >
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                              </svg>
                            </button>
                          </div>
                        ) : (
                          <div className="flex items-center justify-between group">
                            <span>₹{arrearsDeductedValues[payrollItem.employeeId] !== undefined 
                              ? arrearsDeductedValues[payrollItem.employeeId] 
                              : (getEmployeeArrears(payrollItem.employeeId)?.arrearsDeducted || 0)}</span>
                            {isCurrentMonth() && !isPayrollFrozen() && (
                              <button
                                onClick={() => handleArrearsDeductedEdit(payrollItem.employeeId)}
                                className="opacity-0 group-hover:opacity-100 text-blue-600 hover:text-blue-800 p-1 hover:bg-blue-50 rounded transition-all"
                                title="Edit arrears deducted"
                              >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.6 21.036H3v-3.572L16.732 3.732z" />
                                </svg>
                              </button>
                            )}

                                                </div>
                      )}
                    </td>
                  </tr>
                  );
                })
            ) : (
              <tr>
                <td colSpan={5} className="py-12 text-center">
                  <div className="flex flex-col items-center justify-center">
                    <div className="text-gray-300 mb-4">
                      <svg className="h-20 w-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                    </div>
                    <p className="text-gray-500 text-xl font-semibold mb-2">No employee found</p>
                    <p className="text-gray-400 text-sm">No payroll data available for the selected period</p>
                  </div>
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );

  // Debug freeze status state
  useEffect(() => {
    console.log('🔒 Freeze status Redux state:', {
      freezeStatus,
      freezeStatusLoading,
      freezeStatusType: typeof freezeStatus,
      freezeStatusValue: freezeStatus
    });
  }, [freezeStatus, freezeStatusLoading]);

  // Pay Structure form handlers
  const handlePayStructureFormChange = (e) => {
    const { name, value } = e.target;
    setPayStructureForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handlePayStructureSubmit = (e) => {
    e.preventDefault();
    
    // Validation
    const basicPercentage = parseFloat(payStructureForm.basicPercentage) || 0;
    const hraPercentage = parseFloat(payStructureForm.hraPercentage) || 0;
    const employerPfPercentage = parseFloat(payStructureForm.employerPfPercentage) || 0;
    const employeePfPercentage = parseFloat(payStructureForm.employeePfPercentage) || 0;
    const pfCap = parseFloat(payStructureForm.pfCap) || 0;

    if (basicPercentage < 0 || basicPercentage > 100) {
      toast.error("Basic Percentage must be between 0 and 100");
      return;
    }
    if (hraPercentage < 0 || hraPercentage > 100) {
      toast.error("HRA Percentage must be between 0 and 100");
      return;
    }
    if (employerPfPercentage < 0 || employerPfPercentage > 100) {
      toast.error("Employer PF Percentage must be between 0 and 100");
      return;
    }
    if (employeePfPercentage < 0 || employeePfPercentage > 100) {
      toast.error("Employee PF Percentage must be between 0 and 100");
      return;
    }
    if (pfCap < 0) {
      toast.error("PF Cap cannot be negative");
      return;
    }
    
    setShowPayStructureConfirmationModal(true);
  };

  const confirmPayStructureSubmit = async () => {
    try {
      const resultAction = await dispatch(savePayStructureSettings(payStructureForm));
      
      if (savePayStructureSettings.fulfilled.match(resultAction)) {
        setShowPayStructureModal(false);
        setShowPayStructureConfirmationModal(false);
        
        // Refresh the data from Redux
        const companyId = sessionStorage.getItem("employeeCompanyId");
        if (companyId) {
          await dispatch(fetchPayrollSettings(companyId));
        }
        await dispatch(fetchPayStructureSettings());
        
        toast.success(`Pay Structure settings ${
          isEditingPayStructure ? "updated" : "created"
        } successfully!`);
      } else {
        throw new Error(resultAction.error.message);
      }
    } catch (error) {
      toast.error(error.message || "Failed to save Pay Structure settings");
    }
  };

  const openPayStructureModal = () => {
    setPayStructureForm({
      basicPercentage: "",
      hraPercentage: "",
      employerPfPercentage: "",
      employeePfPercentage: "",
      pfCap: "",
      professionalTaxThreshold: "",
      professionalTaxAmountAboveThreshold: "",
      professionalTaxAmountBelowThreshold: "",
      description: "",
    });
    setIsEditingPayStructure(false);
    setShowPayStructureModal(true);
  };

  useEffect(() => {
    dispatch(
      fetchAllEmployeeAttendanceOneMonth({
        month: selectedMonth,
        year: selectedYear,
        role: "HRADMIN",
      })
    );
  }, [dispatch, selectedMonth, selectedYear]);

  useEffect(() => {
    dispatch(fetchEmployees());
  }, [dispatch]);



  // Check payroll freeze status when component mounts or month/year changes
  useEffect(() => {
    if (selectedCompanyId && selectedMonth && selectedYear) {
      const monthMap = {
        January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
        July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
      };
      
      const month = monthMap[selectedMonth];
      const year = parseInt(selectedYear);
      
      console.log('🔒 Checking payroll freeze status for:', { companyId: selectedCompanyId, year, month });
      
      dispatch(checkPayrollFreezeStatus({
        companyId: selectedCompanyId,
        year,
        month
      }));
    }
  }, [selectedCompanyId, selectedMonth, selectedYear, dispatch]);

  // Check if payroll was calculated for current month based on Redux state
  useEffect(() => {
    if (payroll && Array.isArray(payroll) && payroll.length > 0) {
      setPayrollCalculatedForCurrentMonth(true);
      if (!isCalculatePayrollClicked) {
        setIsCalculatePayrollClicked(true);
        setDataLastUpdated(new Date());
      }
    } else {
      setPayrollCalculatedForCurrentMonth(false);
    }
  }, [payroll]); // Removed isCalculatePayrollClicked dependency

  // Single useEffect to handle payroll API calls on mount and month/year changes
  useEffect(() => {
    if (selectedCompanyId && selectedMonth && selectedYear && !isApiCallInProgress) {
      const monthMap = {
        January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
        July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
      };
      
      const params = {
        companyId: selectedCompanyId,
        year: parseInt(selectedYear),
        month: monthMap[selectedMonth],
      };
      
      // Create a unique key for this API call
      const apiCallKey = `${selectedCompanyId}_${selectedMonth}_${selectedYear}`;
      
      // Prevent duplicate API calls for the same month/year
      if (lastApiCallRef.current === apiCallKey) {
        console.log('🔄 API already called for this month/year, skipping:', apiCallKey);
        return;
      }
      
      console.log('🚀 Calling payroll API with params:', params);
      
      // Set flag to prevent multiple calls
      setIsApiCallInProgress(true);
      setIsFetchingView(true);
      setPayrollErrorDetails(null);
      
      // Update the ref to track this API call
      lastApiCallRef.current = apiCallKey;
      
      dispatch(getPayroll(params))
        .unwrap()
        .then((result) => {
          console.log('✅ Payroll API call successful:', result);
          setPayrollErrorDetails(null);
          
          if (result && Array.isArray(result) && result.length > 0) {
            setIsCalculatePayrollClicked(true);
            setDataLastUpdated(new Date());
            setPayrollCalculatedForCurrentMonth(true);
          } else {
            setIsCalculatePayrollClicked(false);
            setPayrollCalculatedForCurrentMonth(false);
            setDataLastUpdated(null);
          }
        })
        .catch((error) => {
          console.log('❌ Payroll API call failed:', error);
          setPayrollErrorDetails(error);
          setIsCalculatePayrollClicked(false);
          setPayrollCalculatedForCurrentMonth(false);
        })
        .finally(() => {
          setIsFetchingView(false);
          setIsApiCallInProgress(false);
        });
    }
  }, [selectedCompanyId, selectedMonth, selectedYear, dispatch]);

  // Cleanup function to reset the API call ref when month/year changes
  useEffect(() => {
    // Reset the ref when month/year changes to allow new API calls
    lastApiCallRef.current = '';
  }, [selectedMonth, selectedYear]);

  // Handle freeze status API errors and logging
  useEffect(() => {
    if (freezeStatusLoading === false) {
      if (freezeStatus) {
        console.log('🔒 Payroll freeze status loaded:', freezeStatus);
      } else {
        console.log('🔒 Payroll freeze status check completed, no data');
      }
    }
  }, [freezeStatusLoading, freezeStatus]);

  // Handle freeze creation errors
  useEffect(() => {
    if (freezeCreateError) {
      toast.error(freezeCreateError.message || "Failed to freeze payroll");
    }
  }, [freezeCreateError]);

  // Initialize arrears values when payroll data is loaded
  useEffect(() => {
    if (payroll && Array.isArray(payroll) && payroll.length > 0) {
      const initialArrearsValues = {};
      const initialArrearsDeductedValues = {};
      payroll.forEach(item => {
        initialArrearsValues[item.employeeId] = item.arrearsPaid;
        initialArrearsDeductedValues[item.employeeId] = item.arrearsDeducted;
      });
      setArrearsValues(initialArrearsValues);
      setArrearsDeductedValues(initialArrearsDeductedValues);
      // Also set original values for cancel functionality
      setOriginalArrearsValues(initialArrearsValues);
      setOriginalArrearsDeductedValues(initialArrearsDeductedValues);
      
      // If we have payroll data, ensure the calculation state is set
      if (!isCalculatePayrollClicked) {
        setIsCalculatePayrollClicked(true);
        setDataLastUpdated(new Date());
      }
    }
  }, [payroll, isCalculatePayrollClicked]);

  // Initialize advance values when employees data is loaded
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const initialAdvanceValues = {};
      employees.forEach(employee => {
        // Find corresponding advance data for this employee
        const advanceData = companyAdvances?.find(
          (advance) => advance.employeeId === employee.employeeId
        );
        
        initialAdvanceValues[`${employee.employeeId}_thisMonth`] = advanceData?.thisMonthAdvance ?? employee.thisMonthAdvance ?? 0;
        initialAdvanceValues[`${employee.employeeId}_deduct`] = advanceData?.deductedThisMonth ?? employee.deductInThisMonth ?? 0;
      });
      setAdvanceValues(initialAdvanceValues);
      // Also set original values for cancel functionality
      setOriginalAdvanceValues(initialAdvanceValues);
    }
  }, [employees, companyAdvances]);

  // Handle employee advance error messages
  useEffect(() => {
    if (advanceError) {
      toast.error(advanceError);
      dispatch(clearError());
    }
  }, [advanceError, dispatch]);



  // Fetch company advances when Advance tab is selected
  useEffect(() => {
    if (selectedSection === "Advance") {
      fetchCompanyAdvances();
    }
  }, [selectedSection, fetchCompanyAdvances]);

  // Fetch company advances when month/year changes (if Advance tab is active)
  useEffect(() => {
    if (selectedSection === "Advance") {
      fetchCompanyAdvances();
    }
  }, [selectedMonth, selectedYear, selectedSection, fetchCompanyAdvances]);

  return (
    <div className="flex h-screen bg-gray-100 overflow-hidden">
      <Sidebar
        isCollapsed={isSidebarCollapsed}
        toggleSidebar={() => setIsSidebarCollapsed(!isSidebarCollapsed)}
      />

      <div
        className={`flex-1 relative ${
          isSidebarCollapsed ? "ml-16" : "ml-56"
        } transition-all duration-300 overflow-hidden`}
      >
        <HradminNavbar />

        <div className="p-6 mt-16 h-[calc(100vh-64px)] overflow-y-auto">
          {/* Header with Search and Title */}
          <div className="flex justify-between items-center mb-6">
            <div className="flex items-center gap-4">
              {/* Left Arrow - Before Payroll Management */}
              <button
                onClick={() => {
                  const monthMap = {
                    January: 0, February: 1, March: 2, April: 3, May: 4, June: 5,
                    July: 6, August: 7, September: 8, October: 9, November: 10, December: 11
                  };
                  const currentMonthIndex = monthMap[selectedMonth];
                  const currentYear = parseInt(selectedYear);
                  
                  let newMonthIndex, newYear;
                  if (currentMonthIndex === 0) {
                    // January -> December of previous year
                    newMonthIndex = 11;
                    newYear = currentYear - 1;
                  } else {
                    newMonthIndex = currentMonthIndex - 1;
                    newYear = currentYear;
                  }
                  
                  const monthNames = ["January", "February", "March", "April", "May", "June",
                                    "July", "August", "September", "October", "November", "December"];
                  const newMonth = monthNames[newMonthIndex];
                  
                  setSelectedMonth(newMonth);
                  setSelectedYear(newYear.toString());
                }}
                className="w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors duration-200 flex items-center justify-center text-gray-600 font-bold text-lg border border-gray-200"
                title="Previous month"
              >
                &lt;
              </button>
              
              <h1 className="text-2xl font-bold text-gray-800">
                Payroll Management
              </h1>
              
              <button
                disabled={!isLatestAvailableMonth() || isCalculatingPayroll || isPayrollFrozen()}
                onClick={async () => {
                  // Debug the button state
                  console.log('🔘 Button state debug:', {
                    isLatestAvailableMonth: isLatestAvailableMonth(),
                    isCalculatingPayroll,
                    isPayrollFrozen: isPayrollFrozen(),
                    disabled: !isLatestAvailableMonth() || isCalculatingPayroll || isPayrollFrozen()
                  });
                  
                  if (isLatestAvailableMonth() && !isCalculatingPayroll) {
                    setHasAttemptedCalculate(true);
                    setIsCalculatingPayroll(true);
                    // Hide tables while we recalculate and fetch fresh data
                    setIsFetchingView(true);
                    // Clear previous error while we attempt
                    setPayrollErrorDetails(null);

                    try {
                      console.log("Starting payroll calculation...");

                      // Convert month name to month number
                      const monthMap = {
                        January: 1,
                        February: 2,
                        March: 3,
                        April: 4,
                        May: 5,
                        June: 6,
                        July: 7,
                        August: 8,
                        September: 9,
                        October: 10,
                        November: 11,
                        December: 12,
                      };

                      const requestBody = {
                        companyId: selectedCompanyId,
                        year: parseInt(selectedYear),
                        month: monthMap[selectedMonth],
                      };

                      console.log("Calling generatePayroll API with:", requestBody);

                      // Try to generate payroll (POST). If it fails, we'll still query view to surface exact message
                      await dispatch(generatePayroll(requestBody)).unwrap();
                      console.log("Generate payroll succeeded");
                      toast.success("Payroll calculation completed!");
                      
                      // Update our flag to mark this month as calculated
                      setPayrollCalculatedForCurrentMonth(true);
                      
                      // Then, fetch the generated payroll data (GET request)
                      const params = {
                        companyId: selectedCompanyId,
                        year: parseInt(selectedYear),
                        month: monthMap[selectedMonth],
                      };

                      console.log("Calling getPayroll API with:", params);
                      setIsFetchingView(true);
                      await dispatch(getPayroll(params)).unwrap();
                      setIsFetchingView(false);
                      setPayrollErrorDetails(null);
                      setIsCalculatePayrollClicked(true);
                      setDataLastUpdated(new Date());
                      toast.success("Payroll data loaded successfully!");
                      
                    } catch (error) {
                      console.error("Payroll generation failed:", error);
                      console.log("🔍 Error details:", { status: error?.status, message: error?.message });
                      
                      // Check if it's a 404 error (payroll settings not configured)
                      if (error?.status === 404) {
                        console.log("🚨 404 error detected - payroll settings not configured");
                        // Set the 404 error directly without calling getPayroll
                        setPayrollErrorDetails(error);
                        setIsCalculatePayrollClicked(false);
                        setPayrollCalculatedForCurrentMonth(false);
                      } else {
                        console.log("⚠️ Non-404 error, calling getPayroll for detailed error info");
                        // For other errors, call getPayroll to get detailed error information
                        try {
                          const monthMap = {
                            January: 1,
                            February: 2,
                            March: 3,
                            April: 4,
                            May: 5,
                            June: 6,
                            July: 7,
                            August: 8,
                            September: 9,
                            October: 10,
                            November: 11,
                            December: 12,
                          };
                          const params = {
                            companyId: selectedCompanyId,
                            year: parseInt(selectedYear),
                            month: monthMap[selectedMonth],
                          };
                          // Only fetch if we need to show error details
                          await dispatch(getPayroll(params)).unwrap();
                          setPayrollErrorDetails(null);
                        } catch (viewError) {
                          setPayrollErrorDetails(viewError);
                        }
                      }
                    } finally {
                      setIsCalculatingPayroll(false);
                      setIsFetchingView(false);
                    }
                  }
                }}
                className={`px-6 py-2 rounded-md font-medium text-sm transition-all duration-200 ${
                  // Check if button should be enabled (not disabled)
                  !isLatestAvailableMonth() || isCalculatingPayroll || isPayrollFrozen()
                    ? "bg-gray-400 text-gray-600 cursor-not-allowed opacity-50"
                    : "bg-blue-600 text-white hover:bg-blue-700"
                }`}
              >
                {isCalculatingPayroll 
                  ? "Calculating..." 
                  : isLatestAvailableMonth() && !isPayrollFrozen() && (payrollCalculatedForCurrentMonth || isCalculatePayrollClicked || (payroll && Array.isArray(payroll) && payroll.length > 0))
                    ? "Recalculate Payroll"
                    : "Calculate Payroll"
                }
              </button>
              
              {showCheckboxes && (
                <button
                  onClick={() => {
                    setShowCheckboxes(false);
                    setSelectedEmployees([]);
                  }}
                  className="px-4 py-2 bg-red-500 text-white rounded-md font-medium text-sm transition-colors duration-200 hover:bg-red-600"
                >
                  Cancel Payslip
                </button>
              )}
              
              {isLatestAvailableMonth() && !isPayrollFrozen() && (payrollCalculatedForCurrentMonth || isCalculatePayrollClicked || (payroll && Array.isArray(payroll) && payroll.length > 0)) && (
                <button
                  onClick={() => {
                    if (showCheckboxes) {
                      setShowConfirmationModal(true);
                    } else {
                      setShowCheckboxes(true);
                      setSelectedEmployees(
                        employees.map((emp) => emp.employeeId)
                      );
                    }
                  }}
                  disabled={payroll?.sendPayslipsLoading}
                  className="px-6 py-2 bg-green-600 text-white rounded-md font-medium text-sm transition-all duration-200 hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {showCheckboxes ? "Finalize Payslip" : "Send Payslip"}
                </button>
              )}
              
              {/* Freeze Payroll Button - Only enabled after payslips are sent */}
              {isLatestAvailableMonth() && !isPayrollFrozen() && (payrollCalculatedForCurrentMonth || isCalculatePayrollClicked || (payroll && Array.isArray(payroll) && payroll.length > 0)) && (
                <button
                  onClick={() => setShowFreezePayrollModal(true)}
                  disabled={!payslipsSent || payroll?.sendPayslipsLoading}
                  className="px-6 py-2 bg-red-600 text-white rounded-md font-medium text-sm transition-all duration-200 hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-red-600"
                  title={!payslipsSent ? "Payslips must be sent before freezing payroll" : "Freeze payroll for this month"}
                >
                  Freeze Payroll
                </button>
              )}
              
              {/* Right Arrow - After action buttons */}
              {!isLatestAvailableMonth() && (
                <button
                  onClick={() => {
                    const monthMap = {
                      January: 0, February: 1, March: 2, April: 3, May: 4, June: 5,
                      July: 6, August: 7, September: 8, October: 9, November: 10, December: 11
                    };
                    const currentMonthIndex = monthMap[selectedMonth];
                    const currentYear = parseInt(selectedYear);
                    
                    let newMonthIndex, newYear;
                    if (currentMonthIndex === 11) {
                      // December -> January of next year
                      newMonthIndex = 0;
                      newYear = currentYear + 1;
                    } else {
                      newMonthIndex = currentMonthIndex + 1;
                      newYear = currentYear;
                    }
                    
                    const monthNames = ["January", "February", "March", "April", "May", "June",
                                      "July", "August", "September", "October", "November", "December"];
                    const newMonth = monthNames[newMonthIndex];
                    
                    setSelectedMonth(newMonth);
                    setSelectedYear(newYear.toString());
                  }}
                  className="w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors duration-200 flex items-center justify-center text-gray-600 font-bold text-lg border border-gray-200"
                  title="Next month"
                >
                  &gt;
                </button>
              )}
              
            </div>
            <div className="flex gap-4">
              {(!isLatestAvailableMonth() || payrollCalculatedForCurrentMonth || isCalculatePayrollClicked || (payroll && Array.isArray(payroll) && payroll.length > 0)) && (
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Search..."
                    className="w-full md:w-72 pl-10 pr-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                  <Search className="h-5 w-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
                </div>
              )}
              <div className="relative">
                <Badge
                  variant="outline"
                  className="px-6 py-2 cursor-pointer bg-blue-500 hover:bg-blue-600 transition-colors duration-200 flex items-center gap-2 text-white"
                  onClick={toggleCalendar}
                >
                  <Calendar className="h-5 w-5" />
                  <span className="font-medium text-base">
                    {selectedYear}-
                    {selectedMonth.toLocaleString("default", { month: "long" })}
                  </span>
                </Badge>
                {isCalendarOpen && (
                  <div className="absolute right-0 mt-2 w-64 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                    <div className="p-3 border-b">
                      <div className="text-sm font-medium text-gray-700">
                        {selectedYear}
                      </div>
                    </div>
                    <div className="grid grid-cols-3 gap-1.5 p-3">
                      {[
                        "Jan",
                        "Feb",
                        "Mar",
                        "Apr",
                        "May",
                        "Jun",
                        "Jul",
                        "Aug",
                        "Sep",
                        "Oct",
                        "Nov",
                        "Dec",
                      ]
                        .slice(0, new Date().getMonth())
                        .map((month) => (
                          <button
                            key={month}
                            className={`p-3 text-sm rounded-md transition-colors duration-200 ${
                              month ===
                              selectedMonth
                                .toLocaleString("default", { month: "long" })
                                .slice(0, 3)
                                ? "bg-blue-50 text-blue-600 font-medium hover:bg-blue-100"
                                : "hover:bg-gray-50 text-gray-700"
                            }`}
                            onClick={() =>
                              handleMonthSelection(month, selectedYear)
                            }
                          >
                            {month}
                          </button>
                        ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Minimal centered message before calculate */}
          {payrollErrorDetails && !hasAttemptedCalculate && !isFetchingView && (
            <div className="min-h-[60vh] flex items-center justify-center">
              <div className="text-center max-w-lg px-4">
                <div className="bg-white border border-gray-200 rounded-lg p-6">
                  <h3 className="text-lg font-medium text-gray-800 mb-3">Payroll Not Available</h3>
                  <p className="text-gray-600 mb-3">
                    The payroll for {selectedMonth} {selectedYear} hasn&apos;t been generated yet.
                  </p>
                  <p className="text-gray-700 font-medium">
                    Click the &quot;Calculate Payroll&quot; button above to generate payroll.
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Actionable panel after calculate attempt */}
          {payrollErrorDetails && hasAttemptedCalculate && !isFetchingView && (
            <div className="mt-4">
              {console.log("🎯 Displaying error:", { status: payrollErrorDetails?.status, message: payrollErrorDetails?.message })}
              <div className="bg-white border border-gray-300 rounded-lg shadow-sm p-4">
                <h3 className="text-lg font-semibold text-red-600 mb-3">
                  Payroll Generation Failed
                </h3>
                <div className="mb-3">
                  {payrollErrorDetails?.status === 404 ? (
                    <>
                      <p className="text-gray-700 mb-1">
                        <strong>Reason:</strong> Payroll settings not configured for your company.
                      </p>
                      <p className="text-sm text-gray-600">
                        Please configure Pay Structure Settings before generating payroll.
                      </p>
                    </>
                  ) : (
                    <>
                      <p className="text-gray-700 mb-1">
                        <strong>Reason:</strong> Attendance records incomplete for {payrollErrorDetails?.validationErrors?.failedEmployeeIds?.split(',').length || 0} employees.
                      </p>
                      <p className="text-sm text-gray-600">
                        Complete attendance data for {selectedMonth} {selectedYear} to generate payroll.
                      </p>
                    </>
                  )}
                </div>
                {payrollErrorDetails?.validationErrors?.failedEmployeeIds && payrollErrorDetails?.status !== 404 && (
                  <>
                    <p className="text-sm font-medium text-gray-700 mb-2">Affected Employees:</p>
                    <div className="bg-gray-50 border border-gray-200 rounded p-2 max-h-24 overflow-y-auto">
                      <div className="flex flex-wrap gap-1">
                        {payrollErrorDetails.validationErrors.failedEmployeeIds
                          .split(',')
                          .map((id, index) => (
                            <span
                              key={index}
                              className="text-xs bg-white px-2 py-1 border rounded"
                            >
                              {id.trim()}
                            </span>
                          ))}
                      </div>
                    </div>
                  </>
                )}
                <div className="flex gap-2 mt-3">
                  {payrollErrorDetails?.status === 404 ? (
                    <button
                      onClick={openPayStructureModal}
                      className="px-3 py-1.5 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                    >
                      Configure
                    </button>
                  ) : (
                    <button
                      onClick={() => {
                        setPayrollErrorDetails(null);
                        window.location.href = '/hradmin/attendance';
                      }}
                      className="px-3 py-1.5 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                    >
                      Go to Attendance
                    </button>
                  )}
                  <button
                    onClick={() => {
                      setPayrollErrorDetails(null);
                      setHasAttemptedCalculate(false);
                      setIsCalculatePayrollClicked(false);
                      
                      // Clear our flag for this month
                      setPayrollCalculatedForCurrentMonth(false);
                      
                      dispatch(clearPayroll()); // Clear payroll state from Redux
                    }}
                    className="px-4 py-1.5 bg-gray-500 text-white text-sm rounded hover:bg-gray-600"
                  >
                    Dismiss
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Professional reminder message */}
          {(payrollCalculatedForCurrentMonth || isCalculatePayrollClicked || (payroll && Array.isArray(payroll) && payroll.length > 0)) && (
            <div className="mb-4 text-sm text-blue-600 bg-blue-50 px-4 py-2 rounded-md border border-blue-200 max-w-2xl">
              <span className="font-medium">Note:</span> After calculating or recalculating payroll, please remember to send payslips to employees.
            </div>
          )}



          {/* Tabs - Only show when there's valid data or payroll has been calculated */}
          {!payrollErrorDetails && !isFetchingView && ((payroll && Array.isArray(payroll) && payroll.length > 0) || payrollCalculatedForCurrentMonth || isCalculatePayrollClicked) && (
            <div className="bg-gray-50 overflow-x-auto scrollbar-thin">
              <div className="flex min-w-max">
                {                [
                  "Salary Statement",
                  "Deductions",
                  "Advance",
                  "Arrears"
                ].map((section) => {
                  return (
                    <button
                      key={section}
                      className={`px-8 py-4 text-sm font-medium transition-colors relative ${
                        selectedSection === section
                          ? "text-blue-600 bg-white shadow-[0_-1px_4px_rgba(0,0,0,0.1)] rounded-t-lg"
                          : "text-gray-500 hover:text-gray-700"
                      }`}
                      onClick={() => setSelectedSection(section)}
                    >
                      {section}
                    </button>
                  );
                })}
              </div>
            </div>
          )}

          {!payrollErrorDetails && !isFetchingView && ((payroll && Array.isArray(payroll) && payroll.length > 0) || payrollCalculatedForCurrentMonth || isCalculatePayrollClicked) && (
            <>
              {selectedSection === "Salary Statement" && renderPayrollTable()}
              {selectedSection === "Deductions" && renderDeductionsTable()}
              {selectedSection === "Advance" && renderAdvanceTable()}
              {selectedSection === "Arrears" && renderArrearsTable()}
            </>
          )}
        </div>
      </div>

      {/* Confirmation Modal */}
      {showConfirmationModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-gray-800">
                Confirm Send Payslip
              </h2>
              <button
                onClick={() => setShowConfirmationModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="h-6 w-6" />
              </button>
            </div>
            <div className="mb-6">
              <p className="text-gray-600 mb-4">
                Are you sure you want to send payslips to the selected
                employees?
              </p>
            </div>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowConfirmationModal(false)}
                className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={async () => {
                  if (!selectedEmployees || selectedEmployees.length === 0) {
                    return;
                  }
                  
                  try {
                    const result = await dispatch(sendPayslips(selectedEmployees));
                    
                    if (result.meta.requestStatus === 'fulfilled') {
                      setShowConfirmationModal(false);
                      setShowCheckboxes(false);
                      setSelectedEmployees([]);
                      setPayslipsSent(true); // Enable the Freeze Payroll button
                      toast.success("Payslips sent successfully!");
                    }
                    
                  } catch (error) {
                    console.error("Failed to send payslips:", error);
                    toast.error("Failed to send payslips. Please try again.");
                  }
                }}
                disabled={payroll?.sendPayslipsLoading}
                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {payroll?.sendPayslipsLoading ? "Sending..." : "Send Payslips"}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Pay Structure Settings Modal */}
      {showPayStructureModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-lg">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-gray-800">
                {isEditingPayStructure
                  ? "Edit Pay Structure Settings"
                  : "Configure Pay Structure Settings"}
              </h2>
              <button
                onClick={() => setShowPayStructureModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="h-6 w-6" />
              </button>
            </div>
            <form onSubmit={handlePayStructureSubmit} className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Basic Percentage <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="number"
                    name="basicPercentage"
                    value={payStructureForm.basicPercentage}
                    onChange={handlePayStructureFormChange}
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                    min="0"
                    max="100"
                    step="0.01"
                    placeholder="e.g., 40"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Basic salary percentage
                  </p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    HRA Percentage <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="number"
                    name="hraPercentage"
                    value={payStructureForm.hraPercentage}
                    onChange={handlePayStructureFormChange}
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                    min="0"
                    max="100"
                    step="0.01"
                    placeholder="e.g., 40"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    HRA percentage
                  </p>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Employer PF % <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="number"
                    name="employerPfPercentage"
                    value={payStructureForm.employerPfPercentage}
                    onChange={handlePayStructureFormChange}
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                    min="0"
                    max="100"
                    step="0.01"
                    placeholder="e.g., 12"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Employer PF contribution
                  </p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Employee PF % <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="number"
                    name="employeePfPercentage"
                    value={payStructureForm.employeePfPercentage}
                    onChange={handlePayStructureFormChange}
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                    min="0"
                    max="100"
                    step="0.01"
                    placeholder="e.g., 12"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Employee PF contribution
                  </p>
                </div>
              </div>
              
              <div className="border-t pt-4">
                <h3 className="text-lg font-medium text-gray-800 mb-3">Professional Tax Settings</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Tax Threshold <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="number"
                      name="professionalTaxThreshold"
                      value={payStructureForm.professionalTaxThreshold}
                      onChange={handlePayStructureFormChange}
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                      min="0"
                      step="0.01"
                      placeholder="e.g., 25000"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Monthly salary threshold
                    </p>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Amount Above <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="number"
                      name="professionalTaxAmountAboveThreshold"
                      value={payStructureForm.professionalTaxAmountAboveThreshold}
                      onChange={handlePayStructureFormChange}
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                      min="0"
                      step="0.01"
                      placeholder="e.g., 200"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Tax amount above threshold
                    </p>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4 mt-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Amount Below Threshold
                    </label>
                    <input
                      type="number"
                      name="professionalTaxAmountBelowThreshold"
                      value={payStructureForm.professionalTaxAmountBelowThreshold}
                      onChange={handlePayStructureFormChange}
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      min="0"
                      step="0.01"
                      placeholder="e.g., 0"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Tax amount below threshold
                    </p>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      PF Cap <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="number"
                      name="pfCap"
                      value={payStructureForm.pfCap}
                      onChange={handlePayStructureFormChange}
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                      min="0"
                      step="0.01"
                      placeholder="e.g., 1800"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Maximum PF contribution limit
                    </p>
                  </div>
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  name="description"
                  value={payStructureForm.description}
                  onChange={(e) => setPayStructureForm({...payStructureForm, description: e.target.value})}
                  className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows="2"
                  placeholder="Optional description for these settings"
                />
              </div>

              <div className="flex justify-end gap-3 mt-6">
                <button
                  type="button"
                  onClick={() => setShowPayStructureModal(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  {isEditingPayStructure ? "Update" : "Save"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Pay Structure Confirmation Modal */}
      {showPayStructureConfirmationModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex items-center gap-3 mb-4">
              <h2 className="text-xl font-semibold text-gray-800">
                Confirm Pay Structure Settings
              </h2>
            </div>
            <div className="mb-6">
              <p className="text-gray-600 mb-3">
                Are you sure you want to save these Pay Structure settings?
              </p>
              <div className="bg-gray-50 p-3 rounded-md text-sm">
                <p><strong>Basic Percentage:</strong> {payStructureForm.basicPercentage}%</p>
                <p><strong>HRA Percentage:</strong> {payStructureForm.hraPercentage}%</p>
                <p><strong>Employer PF Percentage:</strong> {payStructureForm.employerPfPercentage}%</p>
                <p><strong>Employee PF Percentage:</strong> {payStructureForm.employeePfPercentage}%</p>
                <p><strong>PF Cap:</strong> ₹{payStructureForm.pfCap}</p>
                <p><strong>Professional Tax Threshold:</strong> ₹{payStructureForm.professionalTaxThreshold}</p>
                <p><strong>Tax Amount Above Threshold:</strong> ₹{payStructureForm.professionalTaxAmountAboveThreshold}</p>
                <p><strong>Tax Amount Below Threshold:</strong> ₹{payStructureForm.professionalTaxAmountBelowThreshold}</p>
                {payStructureForm.description && (
                  <p><strong>Description:</strong> {payStructureForm.description}</p>
                )}
              </div>
            </div>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowPayStructureConfirmationModal(false)}
                className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
              >
                Cancel
              </button>
              <button
                onClick={confirmPayStructureSubmit}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Freeze Payroll Confirmation Modal */}
      {showFreezePayrollModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div>
                <h2 className="text-xl font-semibold text-gray-800">
                  Freeze Payroll
                </h2>
                <p className="text-sm text-gray-500">Important Action Required</p>
              </div>
              <button
                onClick={() => setShowFreezePayrollModal(false)}
                className="ml-auto text-gray-500 hover:text-gray-700 p-1 hover:bg-gray-100 rounded-full transition-colors"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <div className="mb-6">
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                <div className="flex items-start gap-3">
                  <svg className="w-5 h-5 text-red-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                  </svg>
                  <div>
                    <h3 className="font-medium text-red-800 mb-1">Warning: This action cannot be undone</h3>
                    <p className="text-sm text-red-700">
                      Freezing payroll will prevent any further modifications to payroll data for {selectedMonth} {selectedYear}.
                    </p>
                  </div>
                </div>
              </div>

            </div>
            
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowFreezePayrollModal(false)}
                className="px-6 py-2.5 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors font-medium"
              >
                Cancel
              </button>
              <button
                onClick={async () => {
                  try {
                    // Get current month and year from the payroll page
                    const monthMap = {
                      January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,
                      July: 7, August: 8, September: 9, October: 10, November: 11, December: 12
                    };
                    
                    const month = monthMap[selectedMonth];
                    const year = parseInt(selectedYear);
                    
                    // Prepare payload for the API
                    const freezePayload = {
                      companyId: selectedCompanyId,
                      year: year,
                      month: month,
                      isFrozen: true
                    };
                    
                    console.log('🔒 Freezing payroll with payload:', freezePayload);
                    
                    // Call the API to freeze payroll
                    const result = await dispatch(createPayrollFreezeStatus(freezePayload)).unwrap();
                    
                    console.log('✅ Payroll freeze result:', result);
                    
                    // Close modal and show success message
                    setShowFreezePayrollModal(false);
                    toast.success(`Payroll frozen successfully for ${selectedMonth} ${selectedYear}`);
                    
                    // Refresh the freeze status to update the UI
                    dispatch(checkPayrollFreezeStatus({
                      companyId: selectedCompanyId,
                      year: year,
                      month: month
                    }));
                    
                  } catch (error) {
                    console.error("Failed to freeze payroll:", error);
                    const errorMessage = error?.message || "Failed to freeze payroll. Please try again.";
                    toast.error(errorMessage);
                  }
                }}
                disabled={freezeCreateLoading}
                className="px-6 py-2.5 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors font-medium shadow-sm disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {freezeCreateLoading ? "Freezing..." : "Freeze Payroll"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default withAuth(PayrollManagement);